version: "3.8"
services:
  mysql:
    image: mariadb:10.6.9
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: "unless-stopped"
    # user: ${UID}:${GID}
    cap_add:
      - SYS_NICE
    labels:
      - app.name=patientportal
      - app.namespace=${ENVIRONMENT_NAME}
      - app.stack=core
      - io.portainer.accesscontrol.teams=developers
    ports:
      - "13306:3306"
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh", "--su-mysql", "--connect", "--innodb_initialized", "--innodb_buffer_pool_loaded"]
      interval: 5s
      start_period: 2s
      timeout: 2s
      retries: 10
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_logs:/var/log/mysql
    environment:
      MARIADB_MYSQL_LOCALHOST_USER: "true"
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
      MARIADB_DATABASE: ${MARIADB_DATABASE}
      MARIADB_USER: ${MARIADB_USER}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD}
    networks:
      - backend-net

  api-base:
    image: ghcr.io/averni/oh-patient-portal/ohpp-api:${PATIENTPORTAL_VERSION}
    restart: "no"
    labels:
      - app.name=patientportal
      - app.namespace=${ENVIRONMENT_NAME}
      - app.stack=core
      - io.portainer.accesscontrol.teams=developers
    networks:
      - backend-net
    volumes:
      - sql_files:/app/sql

  api:
    extends:
      service: api-base
    ports:
      - 18080:8080
    # command: ["java", "-jar", "patientportal-0.0.1-SNAPSHOT.jar", "--spring.profiles.active=init"]
    # volumes:
    #   - ./resources/application.properties:/app/resources/application.properties
    # healthcheck:
    #   test: ["CMD", "docker-healthcheck"]
    #   interval: 5s
    #   timeout: 5s
    #   start_period: 5s
    #   retries: 3
    # environment:
    #   - WORDPRESS_DB_HOST=mysql
    
  ui:
    image: patient-portal-ui-image:latest
    build:
      context: ./patient-portal-ui
      dockerfile: Dockerfile-release
    ports:
      - 3001:80
      
  # http:
  #   image: ghcr.io/averni/oh-patient-portal/ohpp-api-http:${PATIENTPORTAL_VERSION}
  #   restart: "no"
  #   volumes:
  #     - html_data:/var/www/html
  #     - http_logs:/var/log/nginx/host
  #     - pids:/var/run
  #   environment:
  #     WORKER_PROCESSES: ${NGINX_WORKER_PROCESSES}
  #     WORKER_CONNECTIONS: ${NGINX_WORKER_CONNECTIONS}
  #   labels:
  #     - app.name=patientportal
  #     - app.namespace=${ENVIRONMENT_NAME}
  #     - app.stack=core
  #     - io.portainer.accesscontrol.teams=developers
  #     - traefik.enable=true
  #     - traefik.docker.network=patientportal-net
  #     - traefik.http.routers.patientportal-${ENVIRONMENT_NAME}.rule=Host(`${ENVIRONMENT_NAME}.${BASE_DOMAIN}`, `${ENVIRONMENT_NAME}-${ADMIN_DOMAIN}.${BASE_DOMAIN}`)
  #     - traefik.http.routers.patientportal-${ENVIRONMENT_NAME}.entrypoints=websecure
  #     - traefik.http.routers.patientportal-${ENVIRONMENT_NAME}.tls=true
  #     - traefik.http.routers.patientportal-${ENVIRONMENT_NAME}.priority=10
  #     - traefik.http.routers.patientportal-${ENVIRONMENT_NAME}.service=patientportal-${ENVIRONMENT_NAME}
  #     - traefik.http.services.patientportal-${ENVIRONMENT_NAME}.loadbalancer.server.port=80
  #     - traefik.http.services.patientportal-${ENVIRONMENT_NAME}.loadbalancer.passhostheader=true
  #     - traefik.http.services.patientportal-${ENVIRONMENT_NAME}.loadbalancer.healthcheck.path=/x-lb-healthcheck.txt
  #     - traefik.http.services.patientportal-${ENVIRONMENT_NAME}.loadbalancer.healthcheck.interval=1200ms
  #     - traefik.http.services.patientportal-${ENVIRONMENT_NAME}.loadbalancer.healthcheck.timeout=700ms
  #     - traefik.http.services.patientportal-${ENVIRONMENT_NAME}.loadbalancer.healthcheck.scheme=http
  #   healthcheck:
  #     test: ["CMD", "curl", "-H", "Host: ${ENVIRONMENT_NAME}-${ADMIN_DOMAIN}.${BASE_DOMAIN}", "--fail", "http://127.0.0.1/heathz"]
  #     interval: 5s
  #     timeout: 5s
  #     start_period: 5s
  #     retries: 3
  #   ulimits:
  #     nproc: 655353
  #     nofile:
  #       soft: 1048576
  #       hard: 1048576
  #   networks:
  #     - frontend-net
  #     - backend-net

volumes:
  mysql_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATA_SHARED}/${ENVIRONMENT_NAME}/database

  sql_files:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATA_SHARED}/${ENVIRONMENT_NAME}/sql

  http_logs:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATA_SHARED}/${ENVIRONMENT_NAME}/logs/nginx

  mysql_logs:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATA_SHARED}/${ENVIRONMENT_NAME}/logs/mysql

  pids:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATA_SHARED}/${ENVIRONMENT_NAME}/run

networks:
  frontend-net:
    driver: bridge 
    #external: true

  backend-net:
    driver: bridge 
    # driver_opts:
    #   com.docker.network.driver.mtu: 1460
